#!/usr/bin/env python3
"""
Setup script for AI Digest Generator
Helps configure the system with your specific repositories and settings.
"""

import os
import sys
import json
from pathlib import Path

def print_banner():
    """Print a welcome banner."""
    print("""
ü§ñ AI Digest Generator Setup for BlueprintLabs
==============================================

This script will help you configure the AI Digest Generator for your repositories.
    """)

def get_github_token():
    """Get GitHub token from user."""
    print("\nüîë GitHub Token Setup")
    print("====================")
    print("You need a GitHub Personal Access Token with 'repo' scope.")
    print("1. Go to GitHub ‚Üí Settings ‚Üí Developer settings ‚Üí Personal access tokens ‚Üí Tokens (classic)")
    print("2. Generate a new token with 'repo' scope")
    print("3. Copy the token and paste it below")
    
    token = input("\nEnter your GitHub token: ").strip()
    
    if not token:
        print("‚ùå GitHub token is required!")
        return None
    
    return token

def get_gemini_api_key():
    """Get Gemini API key from user."""
    print("\nüß† Gemini API Key Setup")
    print("======================")
    print("You need a Google Gemini API key.")
    print("1. Visit https://makersuite.google.com/app/apikey")
    print("2. Create a new API key")
    print("3. Copy the key and paste it below")
    
    api_key = input("\nEnter your Gemini API key: ").strip()
    
    if not api_key:
        print("‚ùå Gemini API key is required!")
        return None
    
    return api_key

def get_repositories():
    """Get list of repositories from user."""
    print("\nüìö Repository Configuration")
    print("==========================")
    print("Enter the repositories you want to monitor.")
    print("Format: owner/repository-name (e.g., BlueprintLabs/TagPilot)")
    print("Enter one repository per line. Press Enter twice when done.")
    
    repos = []
    while True:
        repo = input(f"Repository {len(repos) + 1}: ").strip()
        if not repo:
            if repos:
                break
            else:
                print("‚ùå At least one repository is required!")
                continue
        
        # Validate format
        if '/' not in repo:
            print("‚ùå Invalid format! Use 'owner/repository-name'")
            continue
        
        repos.append(repo)
    
    return repos

def get_digest_period():
    """Get digest period from user."""
    print("\nüìÖ Digest Period Configuration")
    print("==============================")
    print("How many days back should the digest analyze?")
    print("Recommended: 2 days (default)")
    
    while True:
        try:
            period = input("Enter number of days (default: 2): ").strip()
            if not period:
                return 2
            
            period = int(period)
            if period < 1 or period > 30:
                print("‚ùå Period must be between 1 and 30 days!")
                continue
            
            return period
        except ValueError:
            print("‚ùå Please enter a valid number!")

def get_schedule():
    """Get schedule preference from user."""
    print("\n‚è∞ Schedule Configuration")
    print("========================")
    print("How often should the digest be generated?")
    print("1. Every day")
    print("2. Every 2 days (recommended)")
    print("3. Every 3 days")
    print("4. Weekly")
    print("5. Custom")
    
    while True:
        choice = input("Enter your choice (1-5, default: 2): ").strip()
        if not choice:
            return 2
        
        try:
            choice = int(choice)
            if choice == 1:
                return 1
            elif choice == 2:
                return 2
            elif choice == 3:
                return 3
            elif choice == 4:
                return 7
            elif choice == 5:
                custom = input("Enter custom number of days: ").strip()
                return int(custom)
            else:
                print("‚ùå Please enter a valid choice (1-5)!")
        except ValueError:
            print("‚ùå Please enter a valid number!")

def create_env_file(github_token, gemini_api_key, repos, period):
    """Create .env file with configuration."""
    env_content = f"""# AI Digest Generator Configuration
# Generated by setup.py

GITHUB_TOKEN={github_token}
GEMINI_API_KEY={gemini_api_key}
GITHUB_REPOS={','.join(repos)}
DIGEST_PERIOD_DAYS={period}
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print(f"‚úÖ Created .env file with your configuration")

def update_workflow_schedule(schedule_days):
    """Update the GitHub Actions workflow with the chosen schedule."""
    workflow_file = Path('.github/workflows/digest.yml')
    
    if not workflow_file.exists():
        print("‚ö†Ô∏è  Workflow file not found. You'll need to update it manually.")
        return
    
    # Read current workflow
    with open(workflow_file, 'r') as f:
        content = f.read()
    
    # Update cron schedule
    if schedule_days == 1:
        cron = '0 9 * * *'  # Daily at 9 AM
    elif schedule_days == 2:
        cron = '0 9 */2 * *'  # Every 2 days at 9 AM
    elif schedule_days == 3:
        cron = '0 9 */3 * *'  # Every 3 days at 9 AM
    elif schedule_days == 7:
        cron = '0 9 * * 1'  # Weekly on Mondays at 9 AM
    else:
        cron = f'0 9 */{schedule_days} * *'  # Custom schedule
    
    # Replace the cron line
    import re
    updated_content = re.sub(
        r'cron: \'[^\']*\'',
        f"cron: '{cron}'",
        content
    )
    
    with open(workflow_file, 'w') as f:
        f.write(updated_content)
    
    print(f"‚úÖ Updated workflow schedule to run every {schedule_days} days")

def create_config_summary(github_token, gemini_api_key, repos, period, schedule):
    """Create a configuration summary."""
    print("\nüìã Configuration Summary")
    print("========================")
    print(f"‚úÖ GitHub Token: {'*' * 10 + github_token[-4:] if github_token else 'Not set'}")
    print(f"‚úÖ Gemini API Key: {'*' * 10 + gemini_api_key[-4:] if gemini_api_key else 'Not set'}")
    print(f"‚úÖ Repositories ({len(repos)}):")
    for repo in repos:
        print(f"   - {repo}")
    print(f"‚úÖ Digest Period: {period} days")
    print(f"‚úÖ Schedule: Every {schedule} days")
    
    print("\nüìÅ Files Created:")
    print("   - .env (configuration)")
    print("   - .github/workflows/digest.yml (updated schedule)")

def print_next_steps(repos):
    """Print next steps for the user."""
    print("\nüöÄ Next Steps")
    print("=============")
    print("1. Add GitHub Secrets:")
    print("   - Go to your repository ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions")
    print("   - Add GITHUB_TOKEN with your GitHub token")
    print("   - Add GEMINI_API_KEY with your Gemini API key")
    print("   - Add GITHUB_REPOS with: " + ','.join(repos))
    
    print("\n2. Test the Setup:")
    print("   - Run: python generate_digest.py")
    print("   - Or trigger the GitHub Action manually")
    
    print("\n3. Monitor Results:")
    print("   - Check the 'digests' folder for generated files")
    print("   - Review GitHub Actions logs for any issues")
    
    print("\n4. Customize (Optional):")
    print("   - Edit config.py for advanced settings")
    print("   - Modify the Gemini prompt in generate_digest.py")
    print("   - Adjust the schedule in .github/workflows/digest.yml")

def main():
    """Main setup function."""
    print_banner()
    
    # Get configuration from user
    github_token = get_github_token()
    if not github_token:
        sys.exit(1)
    
    gemini_api_key = get_gemini_api_key()
    if not gemini_api_key:
        sys.exit(1)
    
    repos = get_repositories()
    if not repos:
        sys.exit(1)
    
    period = get_digest_period()
    schedule = get_schedule()
    
    # Create configuration files
    create_env_file(github_token, gemini_api_key, repos, period)
    update_workflow_schedule(schedule)
    
    # Show summary
    create_config_summary(github_token, gemini_api_key, repos, period, schedule)
    
    # Show next steps
    print_next_steps(repos)
    
    print("\nüéâ Setup complete! Your AI Digest Generator is ready to use.")

if __name__ == "__main__":
    main() 